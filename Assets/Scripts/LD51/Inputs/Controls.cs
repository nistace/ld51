//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LD51.Inputs
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""c2cb1c96-a245-41fb-ac05-7cf4555833f0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8e2130a1-3cb6-49d2-91f4-e858ca89939c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""c205da6e-af27-4288-93e8-409662223a0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""26aa0233-68ba-4ce3-81ec-2fabf3eefd34"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c24109a-c674-4c06-8310-48f2af8b845e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""02ff10ae-a4c9-401c-9c82-e8e8d55333d6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9aa1bd59-0cf5-4b43-831f-f179af76f39f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0683f9f8-77ea-4458-940a-c49985e66ca9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6c308fcb-b9e3-42cc-8975-8971abe4088a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""201f7ff3-b4c9-46cc-9e59-d6869e43e381"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""24e79248-9b37-484d-8746-c1248bd74e42"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b660d859-04e9-4ea4-9fa4-b397a672b3c9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""39ad5242-643e-453a-854a-794a523ca668"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8823c620-3fd7-42f4-b2ff-690a3da274c4"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tensie"",
            ""id"": ""d69ac4c7-0140-4c0d-a15f-85fd419b4132"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""66313c08-7432-4cf9-aeeb-ea5ecc0336d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""70cdcdb7-ede6-4fd2-a2fb-43be352cf40b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6b648e13-9bef-4e18-abf6-867580382c61"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""643366f1-bd6f-4499-9921-8ad69a6721b6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9bece0a1-3885-484e-bef2-ccda76b6d710"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""70c87cff-0ba9-42a2-a845-9477046f40ff"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""388a6a2f-6fd8-49e6-af36-b422c01f9c9d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a6c12a4c-8ad8-4ab2-a99c-6106ec7de820"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""49e5eee5-bfe9-47c9-b081-0309539ed63a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a8fcb4d-515f-4113-b7a5-99b949b8d686"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9ce3ea46-8d8e-4db9-9545-d43084b5c9ef"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5ad9523a-250a-44e9-832b-db2c90a62d48"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""469a9555-fefb-4e4d-b452-6c99a16e30bd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df2acbd8-3dd3-486e-80b2-884b49d2544f"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Construction"",
            ""id"": ""486b46a0-ee4f-49df-98bd-e0c080207e71"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""9c1f8773-2982-4880-a673-bb9e130a1aed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Place"",
                    ""type"": ""Button"",
                    ""id"": ""ee20aade-e17c-4628-9a9a-524345a96c6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""a2fd6140-442a-431a-850b-44115f5105ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a0f1b26-1cfd-4849-9f07-d7a20d661449"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a21ad248-72e4-4686-b238-0ad8c840b3c9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92eef591-1ca5-4c42-9eb8-9d123f4b62a4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PrepareTensie"",
            ""id"": ""384e3fff-366e-4751-89de-48ce6a98f96d"",
            ""actions"": [
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""cf8ea876-dd0c-424d-9e1f-d3158592ee54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b017eee7-f8aa-4081-a14b-bdbe147440c3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""App"",
            ""id"": ""8a3c7849-31cd-4900-a868-2384eb95cf2b"",
            ""actions"": [
                {
                    ""name"": ""Volume"",
                    ""type"": ""Button"",
                    ""id"": ""ab5cafee-42f1-4241-bfc1-07fadf7fe7df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeDown"",
                    ""type"": ""Button"",
                    ""id"": ""bce6e3ea-29cb-4b46-bd37-7cbf09436792"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""db956f79-6a6a-4c41-8bfc-836d4af784e9"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Volume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d07b3b9-a26a-4c21-b54a-4c3c52907ad9"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""1cbf43c4-295d-4b99-baee-f8b524b05f14"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""13c916a9-93a4-4728-9fde-f57800c4cd07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ba8fa60-12da-452a-af32-96a1c7cd80e3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Move = m_Camera.FindAction("Move", throwIfNotFound: true);
            m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
            // Tensie
            m_Tensie = asset.FindActionMap("Tensie", throwIfNotFound: true);
            m_Tensie_Move = m_Tensie.FindAction("Move", throwIfNotFound: true);
            m_Tensie_Interact = m_Tensie.FindAction("Interact", throwIfNotFound: true);
            // Construction
            m_Construction = asset.FindActionMap("Construction", throwIfNotFound: true);
            m_Construction_Aim = m_Construction.FindAction("Aim", throwIfNotFound: true);
            m_Construction_Place = m_Construction.FindAction("Place", throwIfNotFound: true);
            m_Construction_Cancel = m_Construction.FindAction("Cancel", throwIfNotFound: true);
            // PrepareTensie
            m_PrepareTensie = asset.FindActionMap("PrepareTensie", throwIfNotFound: true);
            m_PrepareTensie_Cancel = m_PrepareTensie.FindAction("Cancel", throwIfNotFound: true);
            // App
            m_App = asset.FindActionMap("App", throwIfNotFound: true);
            m_App_Volume = m_App.FindAction("Volume", throwIfNotFound: true);
            m_App_VolumeDown = m_App.FindAction("VolumeDown", throwIfNotFound: true);
            // Menu
            m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
            m_Menu_Quit = m_Menu.FindAction("Quit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_Move;
        private readonly InputAction m_Camera_Zoom;
        public struct CameraActions
        {
            private @Controls m_Wrapper;
            public CameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Camera_Move;
            public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                    @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Zoom.started += instance.OnZoom;
                    @Zoom.performed += instance.OnZoom;
                    @Zoom.canceled += instance.OnZoom;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);

        // Tensie
        private readonly InputActionMap m_Tensie;
        private ITensieActions m_TensieActionsCallbackInterface;
        private readonly InputAction m_Tensie_Move;
        private readonly InputAction m_Tensie_Interact;
        public struct TensieActions
        {
            private @Controls m_Wrapper;
            public TensieActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Tensie_Move;
            public InputAction @Interact => m_Wrapper.m_Tensie_Interact;
            public InputActionMap Get() { return m_Wrapper.m_Tensie; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TensieActions set) { return set.Get(); }
            public void SetCallbacks(ITensieActions instance)
            {
                if (m_Wrapper.m_TensieActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_TensieActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_TensieActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_TensieActionsCallbackInterface.OnMove;
                    @Interact.started -= m_Wrapper.m_TensieActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_TensieActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_TensieActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_TensieActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public TensieActions @Tensie => new TensieActions(this);

        // Construction
        private readonly InputActionMap m_Construction;
        private IConstructionActions m_ConstructionActionsCallbackInterface;
        private readonly InputAction m_Construction_Aim;
        private readonly InputAction m_Construction_Place;
        private readonly InputAction m_Construction_Cancel;
        public struct ConstructionActions
        {
            private @Controls m_Wrapper;
            public ConstructionActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Aim => m_Wrapper.m_Construction_Aim;
            public InputAction @Place => m_Wrapper.m_Construction_Place;
            public InputAction @Cancel => m_Wrapper.m_Construction_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_Construction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ConstructionActions set) { return set.Get(); }
            public void SetCallbacks(IConstructionActions instance)
            {
                if (m_Wrapper.m_ConstructionActionsCallbackInterface != null)
                {
                    @Aim.started -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnAim;
                    @Place.started -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnPlace;
                    @Place.performed -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnPlace;
                    @Place.canceled -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnPlace;
                    @Cancel.started -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnCancel;
                    @Cancel.performed -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnCancel;
                    @Cancel.canceled -= m_Wrapper.m_ConstructionActionsCallbackInterface.OnCancel;
                }
                m_Wrapper.m_ConstructionActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                    @Place.started += instance.OnPlace;
                    @Place.performed += instance.OnPlace;
                    @Place.canceled += instance.OnPlace;
                    @Cancel.started += instance.OnCancel;
                    @Cancel.performed += instance.OnCancel;
                    @Cancel.canceled += instance.OnCancel;
                }
            }
        }
        public ConstructionActions @Construction => new ConstructionActions(this);

        // PrepareTensie
        private readonly InputActionMap m_PrepareTensie;
        private IPrepareTensieActions m_PrepareTensieActionsCallbackInterface;
        private readonly InputAction m_PrepareTensie_Cancel;
        public struct PrepareTensieActions
        {
            private @Controls m_Wrapper;
            public PrepareTensieActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Cancel => m_Wrapper.m_PrepareTensie_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_PrepareTensie; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PrepareTensieActions set) { return set.Get(); }
            public void SetCallbacks(IPrepareTensieActions instance)
            {
                if (m_Wrapper.m_PrepareTensieActionsCallbackInterface != null)
                {
                    @Cancel.started -= m_Wrapper.m_PrepareTensieActionsCallbackInterface.OnCancel;
                    @Cancel.performed -= m_Wrapper.m_PrepareTensieActionsCallbackInterface.OnCancel;
                    @Cancel.canceled -= m_Wrapper.m_PrepareTensieActionsCallbackInterface.OnCancel;
                }
                m_Wrapper.m_PrepareTensieActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Cancel.started += instance.OnCancel;
                    @Cancel.performed += instance.OnCancel;
                    @Cancel.canceled += instance.OnCancel;
                }
            }
        }
        public PrepareTensieActions @PrepareTensie => new PrepareTensieActions(this);

        // App
        private readonly InputActionMap m_App;
        private IAppActions m_AppActionsCallbackInterface;
        private readonly InputAction m_App_Volume;
        private readonly InputAction m_App_VolumeDown;
        public struct AppActions
        {
            private @Controls m_Wrapper;
            public AppActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Volume => m_Wrapper.m_App_Volume;
            public InputAction @VolumeDown => m_Wrapper.m_App_VolumeDown;
            public InputActionMap Get() { return m_Wrapper.m_App; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AppActions set) { return set.Get(); }
            public void SetCallbacks(IAppActions instance)
            {
                if (m_Wrapper.m_AppActionsCallbackInterface != null)
                {
                    @Volume.started -= m_Wrapper.m_AppActionsCallbackInterface.OnVolume;
                    @Volume.performed -= m_Wrapper.m_AppActionsCallbackInterface.OnVolume;
                    @Volume.canceled -= m_Wrapper.m_AppActionsCallbackInterface.OnVolume;
                    @VolumeDown.started -= m_Wrapper.m_AppActionsCallbackInterface.OnVolumeDown;
                    @VolumeDown.performed -= m_Wrapper.m_AppActionsCallbackInterface.OnVolumeDown;
                    @VolumeDown.canceled -= m_Wrapper.m_AppActionsCallbackInterface.OnVolumeDown;
                }
                m_Wrapper.m_AppActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Volume.started += instance.OnVolume;
                    @Volume.performed += instance.OnVolume;
                    @Volume.canceled += instance.OnVolume;
                    @VolumeDown.started += instance.OnVolumeDown;
                    @VolumeDown.performed += instance.OnVolumeDown;
                    @VolumeDown.canceled += instance.OnVolumeDown;
                }
            }
        }
        public AppActions @App => new AppActions(this);

        // Menu
        private readonly InputActionMap m_Menu;
        private IMenuActions m_MenuActionsCallbackInterface;
        private readonly InputAction m_Menu_Quit;
        public struct MenuActions
        {
            private @Controls m_Wrapper;
            public MenuActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Quit => m_Wrapper.m_Menu_Quit;
            public InputActionMap Get() { return m_Wrapper.m_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
            public void SetCallbacks(IMenuActions instance)
            {
                if (m_Wrapper.m_MenuActionsCallbackInterface != null)
                {
                    @Quit.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnQuit;
                    @Quit.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnQuit;
                    @Quit.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnQuit;
                }
                m_Wrapper.m_MenuActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Quit.started += instance.OnQuit;
                    @Quit.performed += instance.OnQuit;
                    @Quit.canceled += instance.OnQuit;
                }
            }
        }
        public MenuActions @Menu => new MenuActions(this);
        public interface ICameraActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
        }
        public interface ITensieActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
        public interface IConstructionActions
        {
            void OnAim(InputAction.CallbackContext context);
            void OnPlace(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
        }
        public interface IPrepareTensieActions
        {
            void OnCancel(InputAction.CallbackContext context);
        }
        public interface IAppActions
        {
            void OnVolume(InputAction.CallbackContext context);
            void OnVolumeDown(InputAction.CallbackContext context);
        }
        public interface IMenuActions
        {
            void OnQuit(InputAction.CallbackContext context);
        }
    }
}
